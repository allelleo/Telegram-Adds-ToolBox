from datetime import datetime, timedelta, timezone
from collections import defaultdict
import re
import dateparser

from src.telegram_add_tool.backend.src.apps.user.models import (
    InviteLinksOrm,
    UserOrm,
    UserActionHistoryOrm,
    UserActivityStatusOrm,
)


async def get_users_with_link_and_enter_action(link_id) -> list[UserOrm]:
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É —Å id=6 –∏ –∫–∞–Ω–∞–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞
    link = await InviteLinksOrm.get(id=link_id).prefetch_related("channel")
    channel = link.channel

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–µ —ç—Ç—É —Å—Å—ã–ª–∫—É
    users = await UserOrm.filter(used_links__id=link_id).prefetch_related("used_links")

    result_users = []

    for user in users:
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
        last_action = (
            await UserActionHistoryOrm.filter(user=user, channel=channel)
            .order_by("-id")
            .first()
        )

        if last_action and last_action.action == "enter":
            result_users.append(user)

    return result_users


def parse_registration_date(message: str) -> datetime | None:
    match = re.search(r"Estimated registration date: (.+)", message or "")
    return dateparser.parse(match.group(1)) if match else None


def categorize_date(date: datetime | None, now: datetime) -> str:
    if date is None:
        return "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    if date.tzinfo is not None:
        date = date.astimezone(timezone.utc).replace(tzinfo=None)

    delta = now.replace(tzinfo=None) - date
    if delta.days == 0:
        return "–¥–µ–Ω—å"
    elif delta.days <= 7:
        return "–¥–æ –Ω–µ–¥–µ–ª–∏"
    elif delta.days <= 30:
        return "–¥–æ –º–µ—Å—è—Ü–∞"
    elif delta.days <= 90:
        return "–¥–æ 3-—Ö –º–µ—Å—è—Ü–µ–≤"
    elif delta.days <= 180:
        return "–¥–æ –ø–æ–ª—É–≥–æ–¥–∞"
    elif delta.days <= 1095:
        return "–ë–æ–ª—å—à–µ –≥–æ–¥–∞"
    else:
        return "–ë–æ–ª—å—à–µ 3-–µ—Ö –ª–µ—Ç"


async def get_user_metrics(users: list[UserOrm]) -> dict:
    now = datetime.now(timezone.utc)
    total = len(users)
    is_prem = sum(1 for user in users if user.is_premium)

    # –®–∞–±–ª–æ–Ω—ã
    activity_map = defaultdict(list)
    reg_map = defaultdict(list)
    avatar_map = defaultdict(list)

    for user in users:
        # üìç Activity
        last_status = (
            await UserActivityStatusOrm.filter(user=user).order_by("-timestamp").first()
        )
        if not last_status:
            activity_map["–Ω–µ–¥–∞–≤–Ω–æ"].append(user)
        else:
            delta = now - last_status.timestamp
            if timedelta(hours=6) <= delta <= timedelta(hours=12):
                activity_map["6-12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"].append(user)
            elif timedelta(hours=13) <= delta <= timedelta(hours=24):
                activity_map["13-24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"].append(user)
            elif (now - timedelta(days=7)) <= last_status.timestamp:
                activity_map["–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"].append(user)
            elif (now - timedelta(days=30)) <= last_status.timestamp:
                activity_map["–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"].append(user)
            else:
                activity_map["–¥–∞–≤–Ω–æ"].append(user)

        # üìç Registration
        reg_date = parse_registration_date(user.registration_message)
        reg_cat = categorize_date(reg_date, now)
        reg_map[reg_cat].append(user)

        # üìç Avatar Date
        avatar_cat = categorize_date(user.photo_date, now)
        avatar_map[avatar_cat].append(user)

    def build_metrics(
        counter: dict[str, list], categories: list[str]
    ) -> dict[str, str]:
        result = {}
        for category in categories:
            count = len(counter.get(category, []))
            percent = round((count / total) * 100, 1) if total else 0.0
            result[category] = f"{count} ({percent}%)"
        return result

    activity_categories = [
        "–Ω–µ–¥–∞–≤–Ω–æ",
        "6-12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥",
        "13-24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
        "–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ",
        "–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
        "–¥–∞–≤–Ω–æ",
    ]

    time_categories = [
        "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        "–¥–µ–Ω—å",
        "–¥–æ –Ω–µ–¥–µ–ª–∏",
        "–¥–æ –º–µ—Å—è—Ü–∞",
        "–¥–æ 3-—Ö –º–µ—Å—è—Ü–µ–≤",
        "–¥–æ –ø–æ–ª—É–≥–æ–¥–∞",
        "–ë–æ–ª—å—à–µ –≥–æ–¥–∞",
        "–ë–æ–ª—å—à–µ 3-–µ—Ö –ª–µ—Ç",
    ]

    return {
        "–ë—ã–ª–∏ –≤ —Å–µ—Ç–∏": build_metrics(activity_map, activity_categories),
        "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": build_metrics(reg_map, time_categories),
        "–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏": build_metrics(avatar_map, time_categories),
        "total": total,
        "is_prem": is_prem,
    }
